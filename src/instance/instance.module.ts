import { Module } from '@nestjs/common';
import { InstanceService } from './service/instance.service';
import { InstanceResolver } from './resolver/instance.resolver';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InstanceController } from './controller/instance.controller';
import { Instance } from './entity/instance.entity';
import { CpuUsage } from './entity/cpu-usage.entity';
import { GpuUsage } from './entity/gpu-usage.entity';
import { MemoryUsage } from './entity/memory-usage.entity';
import { DiskUsage } from './entity/disk-usage.entity';
import { InstanceGateway } from './gateway/instance.gateway';

@Module({
  // Reference: https://docs.nestjs.com/techniques/database
  // This module uses the forFeature() method to define which repositories are registered in the current scope.
  // With that in place, we can inject the UsersRepository into the UserService using the @InjectRepository() decorator:
  imports: [
    TypeOrmModule.forFeature([
      Instance,
      CpuUsage,
      GpuUsage,
      MemoryUsage,
      DiskUsage,
    ]),
  ],
  controllers: [InstanceController, InstanceController],
  providers: [InstanceService, InstanceResolver, InstanceGateway],
  // If you want to use the repository outside of the module which imports TypeOrmModule.forFeature,
  // you'll need to re-export the providers generated by it. You can do this by exporting the whole module.
  exports: [InstanceService, TypeOrmModule],
})
export class InstanceModule {}
